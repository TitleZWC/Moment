apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")
    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")
    def jdkVersion = globalConfiguration.getAt("jdkVersion")
    compileOptions {
        targetCompatibility jdkVersion
        sourceCompatibility jdkVersion
    }

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {

    def globalDependencies = rootProject.ext.globalDependencies
    def testDependencies = rootProject.ext.testDependencies
    def build_debug = globalDependencies.getAt("build_debug").equals("true")
    def build_type = globalDependencies.getAt("build_type").equals("debug")
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(':module:utils:log')
    compile project(':module:resource')
    compile project(':data')
    compile project(':domain')

    compile globalDependencies.multidex
    compile globalDependencies.support_v7
    provided globalDependencies.rxAndroid
    provided globalDependencies.javaxAnnotation
    provided globalDependencies.dagger
    apt globalDependencies.daggerCompiler

    if (build_type && build_debug) {
        compile globalDependencies.leakCanary
    } else {
        compile globalDependencies.leakCanary_no_op
    }
    testCompile globalDependencies.leakCanary_no_op

    testCompile testDependencies.junit
}
