apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
android {
    def globalConfiguration = rootProject.extensions.getByName("ext")
    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")
    def jdkVersion = globalConfiguration.getAt("jdkVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility jdkVersion
        sourceCompatibility jdkVersion
    }
}

dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
//    compile 'com.android.support:appcompat-v7:24.2.1'
//    testCompile 'junit:junit:4.12'
    def globalConfiguration = rootProject.extensions.getByName("ext")
    def build_debug = globalConfiguration.getAt("build_debug").equals("true")
    def globalDependencies = rootProject.ext.globalDependencies
    def testDependencies = rootProject.ext.testDependencies
    if (build_debug) {
        compile globalDependencies.timber
        compile globalDependencies.logger
    } else {
        provided globalDependencies.timber
        provided globalDependencies.logger
    }

    testCompile testDependencies.junit
    testCompile testDependencies.robolectric
}
