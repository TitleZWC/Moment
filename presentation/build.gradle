apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'me.tatarka.retrolambda'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")
    def build_debug = globalConfiguration.getAt("build_debug").equals("true")
    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")
    def jdkVersion = globalConfiguration.getAt("jdkVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

        applicationId globalConfiguration.getAt("androidApplicationId")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        buildConfigField "long", "BUILD_TIME", System.currentTimeMillis().toString() + "L"
    }
    buildTypes {
        release {
            buildConfigField "boolean", "MOMENT_DEBUG", String.valueOf(build_debug)
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "boolean", "MOMENT_DEBUG", "true"
        }

    }
    productFlavors {
        if (build_debug) {
            官方 {}
        } else {
            "360" {}
            "91" {}
        }
    }
    productFlavors.all {
        flavor ->
            flavor.manifestPlaceholders = [UMENT_CHANEL_VALUE: name,
                                           INSTALL_VALUE     : name,]
    }
    compileOptions {
        targetCompatibility jdkVersion
        sourceCompatibility jdkVersion
    }
}

def getBuildType() {
    android.variantFilter { variant ->
        def names = varient.flavors.name
        return varient.buildType.name
    }
}

dependencies {
    def globalDependencies = rootProject.ext.globalDependencies
    def testDependencies = rootProject.ext.testDependencies
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile globalDependencies.dagger
    apt globalDependencies.daggerCompiler
    compile globalDependencies.rxJava
    compile globalDependencies.rxAndroid
    compile globalDependencies.javaxInject
    compile globalDependencies.javaxInject
    compile globalDependencies.umeng
    apt globalDependencies.butterKnifeCompiler
    compile globalDependencies.butterKnife
    compile globalDependencies.recyclerView
    compile globalDependencies.support_v7
    compile project(':domain')
    compile project(':data')

    compile project(':module:feature:common')
//    compile project(':module:utils:log')
//    compile 'com.android.support:appcompat-v7:24.2.1'
//    testCompile 'junit:junit:4.12'
    testCompile testDependencies.junit
}
